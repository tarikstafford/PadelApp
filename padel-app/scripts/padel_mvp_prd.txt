<context>
# Overview
This document outlines the requirements for a Padel court booking web application. The application aims to simplify the process for players to find and book Padel courts, manage their games, and connect with other players. It serves Padel players looking for a convenient way to organize their matches and Padel club administrators who need a platform to manage their court availability and bookings. The primary value is providing a seamless and user-friendly experience for all aspects of Padel game organization.

# Core Features
- **User Authentication & Profiles:**
    - What it does: Allows users to register, log in, and manage their profiles.
    - Why it's important: Essential for personalized experience, booking history, and security.
    - How it works: Users can sign up with email/password. Profiles will store name, email, and a profile picture.
- **Court Booking System:**
    - What it does: Enables players to search for available courts at different clubs and book them for specific time slots.
    - Why it's important: The central functionality of the application.
    - How it works: Users select a club, date, and time. Bookings are made in 30-minute intervals. Each game requires 4 players.
- **Game Management:**
    - What it does: Allows players to create new games, invite other players, and manage existing bookings.
    - Why it's important: Facilitates the social and organizational aspects of Padel.
    - How it works: Creators can invite specific users to a game. Games can be marked as public or private.
- **Public Game Listings:**
    - What it does: Displays public games that other registered players can discover and request to join.
    - Why it's important: Helps players find games if they don't have a full group of 4, and helps fill empty slots.
    - How it works: A dedicated section will list public games with details like club, time, and current player count. Users can request to join.
- **Club & Court Configuration (for Admins/System):**
    - What it does: Allows for the setup and management of different Padel clubs, each with its own set of courts and potentially unique configurations (e.g., operating hours, pricing - though pricing is a future consideration).
    - Why it's important: Necessary to accurately represent real-world club setups and court availability.
    - How it works: Initially, club and court data might be managed via a backend interface or seed data. Each club will have associated courts with specific availability.

# User Experience
- **User Personas:**
    - **Casual Player (Alex):** Plays Padel occasionally with friends, needs an easy way to find and book courts and invite friends.
    - **Regular Player (Maria):** Plays Padel multiple times a week, often looks for public games to join, values a quick booking process and reliable game notifications.
    - **Club Admin (Carlos - future persona for admin features):** Manages a Padel club, needs to list courts, manage bookings, and see club utilization.
- **Key User Flows:**
    - **Registration/Login:** New user signs up -> Existing user logs in.
    - **Book a Court (Private Game):** User logs in -> Searches for club/court availability -> Selects time slot -> Invites 3 other players -> Confirms booking.
    - **Create Public Game:** User logs in -> Searches for club/court availability -> Selects time slot -> Marks game as public -> (Optionally) Invites initial players -> Confirms booking.
    - **Join Public Game:** User logs in -> Browses public games -> Requests to join a game -> Organizer (or system) confirms.
    - **Manage Profile:** User logs in -> Navigates to profile -> Updates name, email, or profile picture.
- **UI/UX Considerations:**
    - Clean, intuitive interface, mobile-responsive design for the web app.
    - Clear visual indicators for court availability (e.g., color-coded time slots).
    - Easy-to-use search and filtering for clubs and games.
    - Notifications for game invitations, confirmations, and reminders (future enhancement).
</context>
<PRD>
# Technical Architecture
- **Frontend:** Web application (e.g., using React, Vue, or Angular).
- **Backend:** API-driven (e.g., using Python with FastAPI, Node.js with Express).
- **Database:** Relational database (e.g., PostgreSQL) or a NoSQL solution (e.g., MongoDB) hosted as a separate service. PostgreSQL is a common choice with Python backends.
- **Authentication:** JWT-based authentication or similar.
- **Key Data Models (Initial):**
    - `User`: id, name, email, password_hash, profile_picture_url.
    - `Club`: id, name, address, number_of_courts, specific_configurations (e.g., opening_hours).
    - `Court`: id, club_id (FK to Club), name/number, type (e.g., indoor/outdoor - future).
    - `Booking`: id, court_id (FK to Court), start_time, end_time, status (e.g., pending, confirmed, cancelled).
    - `Game`: id, booking_id (FK to Booking), created_by_user_id (FK to User), game_type (public/private).
    - `GamePlayer`: game_id (FK to Game), user_id (FK to User), status (e.g., invited, accepted, declined).
- **APIs and Integrations:**
    - Internal APIs for frontend-backend communication.
    - Potential future integration with payment gateways or notification services.
- **Infrastructure Requirements:**
    - **Deployment Platform:** Railway.
    - **Service Structure on Railway:**
        - A service for the web application (frontend).
        - A service for the backend API.
        - A separate container/service for the database (PostgreSQL or NoSQL).

# Development Roadmap
- **MVP Requirements:**
    - User registration and login.
    - Player profile management (name, email, picture).
    - View list of clubs and their courts (initially seeded).
    - Basic court booking for a 4-player game at a specific time (30-min intervals).
    - Ability to create a game and invite 3 other specific registered users by email/username.
    - View created/joined games.
    - Rudimentary public/private game distinction (e.g., a flag on the game).
- **Phase 2 (Post-MVP Enhancements):**
    - Ability for other users to see and request to join *public* games.
    - Organizer approval/rejection for join requests.
    - More detailed club/court information display.
    - Basic game notifications (e.g., for invites, confirmations).
    - User search to find other players to invite.
- **Future Enhancements:**
    - Advanced search filters for games/courts (e.g., by skill level, location proximity).
    - Waiting lists for full games or popular time slots.
    - Player skill ratings/ranking system.
    - Payment integration for bookings.
    - Club administration interface.
    - Mobile applications (iOS/Android).

# Logical Dependency Chain
1.  **Foundation:**
    - User authentication (registration, login, profile).
    - Basic database schema for users, clubs, courts, bookings, games.
2.  **Core Booking Flow:**
    - Display clubs and courts.
    - Implement core booking logic (select court, time, invite 4 players).
    - Store booking and game data.
3.  **Social/Public Features (MVP layer):**
    - Distinguish public/private games.
    - Basic listing of public games (for users to see, joining mechanism can be simpler initially).
4.  **Refinements & Expansion (Post-MVP):**
    - Robust public game joining system.
    - Notifications.
    - Enhanced search/filtering.

# Risks and Mitigations
- **Technical Challenges:**
    - **Risk:** Complexity in managing concurrent booking requests for limited court slots.
    - **Mitigation:** Implement robust locking mechanisms or transactional operations in the backend. Start with simpler validation and refine.
    - **Risk:** Scalability as user base and number of clubs grow.
    - **Mitigation:** Design with scalability in mind. Railway services can be scaled, but efficient code and database queries are still important. Plan for load testing.
- **Figuring out the MVP that we can build upon:**
    - **Risk:** Scope creep, trying to build too many features for MVP.
    - **Mitigation:** Strictly adhere to the defined MVP features. Prioritize the core booking flow.
- **Resource Constraints:**
    - **Risk:** Limited development time/resources.
    - **Mitigation:** Focus on a phased rollout. Utilize existing libraries/frameworks to speed up development. Leverage Railway's managed services where possible.

# Appendix
- **Research findings:** (To be added if specific market research or competitor analysis is done)
    - Playtomic is a key reference point for features and user experience.
- **Technical specifications:** (To be added as more detailed technical decisions are made, e.g., specific library versions, API endpoint details)
    - Deployment Target: Railway platform.
</PRD>