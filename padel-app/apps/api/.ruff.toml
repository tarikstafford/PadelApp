# Ruff configuration file for better IDE integration
# This file duplicates the configuration from pyproject.toml for IDE compatibility

target-version = "py39"
line-length = 88

[lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "N",   # pep8-naming
    "S",   # bandit security
    "A",   # flake8-builtins
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID", # flake8-tidy-imports
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "RUF", # ruff-specific rules
]

ignore = [
    "S101",  # Use of assert
    "S104",  # Possible binding to all interfaces
    "S108",  # Probable insecure usage of temp file/directory
    "S113",  # Missing timeout in requests
    "S301",  # Use of pickle
    "S311",  # Use of random (for non-cryptographic purposes)
    "S324",  # Use of insecure hash function
    "S501",  # Use of requests without timeout
    "S506",  # Use of yaml.load
    "S603",  # Use of subprocess
    "S607",  # Use of subprocess with shell=True
    "B008",  # Do not perform function calls in argument defaults
    "B904",  # Within an except clause, raise exceptions with raise ... from err
    "TRY003", # Avoid specifying long messages outside the exception class
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLW2901", # Outer loop variable overwritten by inner loop target
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "N818",  # Exception name should be named with an Error suffix
    "EM101", # Exception must not use a string literal
    "EM102", # Exception must not use an f-string literal
    "TRY301", # Abstract raise to an inner function
    "PLR0912", # Too many branches
    "PLR0911", # Too many return statements
    "A003",  # Class attribute shadows a python builtin
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "S106",  # Possible hardcoded password
    "PT011", # pytest.raises without match parameter
    "PT012", # pytest.raises should contain a single simple statement
    "SIM108", # Use ternary operator instead of if-else-block
    "DTZ005", # Use of datetime.datetime.now() without tz argument
    "UP007", # Use `X | Y` for type annotations
    "TC001", # Move application import into a type-checking block
    "TC002", # Move third-party import into a type-checking block
    "TC003", # Move standard library import into a type-checking block
]

unfixable = [
    "ERA001", # Don't auto-remove commented out code
    "T20",    # Don't auto-remove print statements
]

[lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
    "PLR2004", # Magic value used in comparison
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
]
"app/tests/**/*.py" = [
    "S101",   # Use of assert
    "PLR2004", # Magic value used in comparison
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
]
"migrations/**/*.py" = [
    "N999",   # Invalid module name
]
"app/seeds/**/*.py" = [
    "S311",   # Use of random (for non-cryptographic purposes)
    "PLR2004", # Magic value used in comparison
]

[lint.mccabe]
max-complexity = 12

[lint.isort]
known-first-party = ["app"]
split-on-trailing-comma = true

[lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[lint.flake8-tidy-imports]
ban-relative-imports = "all"

[lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]